/*
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Config file for defining DSL2 per module options and publishing paths
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Available keys to override module options:
        ext.args   = Additional arguments appended to command in module.
        ext.args2  = Second set of arguments appended to command in module (multi-tool modules).
        ext.args3  = Third set of arguments appended to command in module (multi-tool modules).
        ext.prefix = File name prefix for output files.
----------------------------------------------------------------------------------------
*/

process {


    withName: SAMPLESHEETCHECK {
        publishDir = [
            path: { "${params.outdir}/pipeline_info" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: INPUT_STATS {
        ext.prefix = { "${meta.id}.seqstats" }
        ext.args = '-Ta '
        publishDir = [
            path: { "${params.outdir}/${meta.id}/reads/input/" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }
    withName: CONCAT_INPUT_STATS{
        publishDir = [
            path: { "${params.outdir}/report" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
        ]
    }

    withName: HOSTILE_STATS {
        ext.prefix = { "${meta.id}.dehost_seqstats" }
        ext.args = '-Ta '
        publishDir = [
            path: { "${params.outdir}/${meta.id}/reads/dehost" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: CONCAT_HOSTILE_STATS{
        publishDir = [
            path: { "${params.outdir}/report" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
        ]
    }

    withName: SAMTOOLS_SORT {
        ext.prefix = { "${meta.id}-${params.mapping_tool}.sorted" }
        publishDir = [
            path: { "${params.outdir}/${meta.id}/mapping" },
            mode: params.publish_dir_mode,
            pattern: "*.{bam,bam.bai}",
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    /*
    ----------------------------------------------------------------------------------------
        get references section
    ----------------------------------------------------------------------------------------
    */
    withName: MASH_SCREEN {
        ext.args = "-i ${params.mashthreshold} -w -v ${params.max_p_value}"
        publishDir = [

            path: { "${params.outdir}/${meta.id}/mapping" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }

        ]

    }
    withName: MASH_FILTER {
        ext.args = "-m ${params.min_hash_coverage} -a ${params.min_median_multiplicity}"
        publishDir = [
            path: { "${params.outdir}/${meta.id}/mapping" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
            enabled: true
        ]

    }
    withName: SEQKIT_GREP {
        ext.prefix = {"${meta.id}-reference"}
        publishDir = [
            path: { "${params.outdir}/${meta.id}/mapping" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
            enable: false
        ]
    }

    withName: SEQKIT_SEQ {
        ext.prefix = {"${meta.id}-reference_header"}
        publishDir = [
            path: { "${params.outdir}/${meta.id}/mapping" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
            enable: false
        ]
    }

    withName: SAMTOOLS_FAIDX {
        publishDir = [
            path: { "${params.outdir}/${meta.id}/mapping" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
        ]
    }

    /*
    ----------------------------------------------------------------------------------------
        pre-procesess bam
    ----------------------------------------------------------------------------------------
    */
    //remove duplicates
    withName: PICARD_MARKDUPLICATES {
        ext.prefix = { "${meta.id}-${params.mapping_tool}.rmdup" }
        ext.args = [
            "--ASSUME_SORT_ORDER coordinate",
            "--REMOVE_SEQUENCING_DUPLICATES true",
            "--REMOVE_DUPLICATES true ",
            "--CREATE_INDEX true",
            "--VALIDATION_STRINGENCY LENIENT"
        ].join(' ').trim()

        publishDir = [
            path: { "${params.outdir}/${meta.id}/mapping" },
            pattern: "*.{bam,bai}",
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }
    withName: SAMTOOLS_VIEW{
        ext.prefix = { "${meta.id}-${params.mapping_tool}.filter" }
        ext.args = " -F 3844 "
        publishDir = [
            path: { "${params.outdir}/${meta.id}/mapping" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }
    withName: SAMTOOLS_COVERAGE{
        ext.prefix = { "${meta.id}-${params.mapping_tool}.rmdup.coverage" }
        ext.args = " -d 0 "
        publishDir = [
            path: { "${params.outdir}/${meta.id}/mapping" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }
    //produce bed file with low depth region of the reference
    withName: BEDTOOLS_GENOMECOV_LOWDEPTH {
        ext.args = "-bga  | awk \'\$4 < ${params.mindepth}\' "
        ext.prefix = { "${meta.id}-${params.mapping_tool}.lowdepth" }

        publishDir = [
            path: { "${params.outdir}/${meta.id}/mapping" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: BEDTOOLS_GENOMECOV {
        ext.args = "-d"
        ext.prefix = { "${meta.id}-${params.mapping_tool}.rmdup.perbase"}

        publishDir = [
            path: { "${params.outdir}/${meta.id}/mapping" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
            enabled: false
        ]
    }
    withName: RENAMECHROM {
        ext.prefix = { "${meta.id}-${params.mapping_tool}.rmdup.perbase_rename" }
        publishDir = [
            path: { "${params.outdir}/${meta.id}/mapping" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: PLOT_DEPTH {
        ext.prefix = { "${meta.id}-${params.mapping_tool}.rmdup" }

        publishDir = [
            path: { "${params.outdir}/${meta.id}/mapping" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    /*
    ----------------------------------------------------------------------------------------
        Process VCF
    ----------------------------------------------------------------------------------------
    */
    withName: BCFTOOLS_NORM{
        ext.args = "--check-ref w --multiallelics +any  --output-type z  --write-index=tbi"
        ext.prefix = { "${meta.id}-${params.mapping_tool}_${params.variant_caller}.norm" }
        publishDir = [
            path: { "${params.outdir}/${meta.id}/variants" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
            enabled: true
        ]
    }
    withName: SNPEFF_SNPEFF {
        ext.prefix = { "${meta.id}-${params.mapping_tool}_${params.variant_caller}" }
        ext.args = " -i vcf -o vcf "
        publishDir = [
            path: { "${params.outdir}/${meta.id}/variants" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
            enabled: true
        ]
    }
    withName: BCFTOOLS_FILTER_FIX{
        ext.args =  "--SnpGap 3:indel"

        // ext.args = "-i \'QUAL > 20 && DP > ${params.mindepth}\' --output-type z  --write-index=tbi"
        ext.prefix = { "${meta.id}-${params.mapping_tool}_${params.variant_caller}.fix" }
        publishDir = [
            path: { "${params.outdir}/${meta.id}/variants" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
            enabled: true
        ]
    }

    withName: BCFTOOLS_FILTER_LOW_QUALITY_DEPTH{
        ext.args = [
                    "-e 'QUAL < 20 && FORMAT/DP < ${params.mindepth}'"//,
                   // "--output-type z",
                    //"--write-index=tbi"
        ].join(' ').trim()

        // ext.args = "-i \'QUAL > 20 && DP > ${params.mindepth}\' --output-type z  --write-index=tbi"
        ext.prefix = { "${meta.id}-${params.mapping_tool}_${params.variant_caller}.filtered" }
        publishDir = [
            path: { "${params.outdir}/${meta.id}/variants" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
            enabled: true
        ]
    }

    withName: BCFTOOLS_FILTER_FRAMESHIFT{
        ext.args = [
                    "-e \'INFO/ANN ~ \"frameshift_variant\"\'",
                    "--output-type z",
                    "--write-index=tbi"
        ].join(' ').trim()

        //ext.args = "-e \'INFO/ANN ~ \"frameshift_variant\"\' --output-type z  --write-index=tbi"
        ext.prefix = { "${meta.id}-${params.mapping_tool}_${params.variant_caller}.no_frameshift" }
        publishDir = [
            path: { "${params.outdir}/${meta.id}/variants" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
            enabled: true
        ]
    }

    withName: SETGT {
        ext.prefix = { "${meta.id}-${params.mapping_tool}_${params.variant_caller}.no_frameshift" }
        //ext.args = "-l 0.40 -u 0.60 -d ${params.mindepth}"
        ext.args = "-l ${params.lower_ambiguity_freq} -u ${params.upper_ambiguity_freq} -d ${params.mindepth}"

        publishDir = [
            path: { "${params.outdir}/${meta.id}/variants" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
            enabled: true
        ]
    }
    withName: TABIX_BGZIPTABIX {
        ext.args2 = "-p vcf"

        publishDir = [
            path: { "${params.outdir}/${meta.id}/variants" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
            enabled: true
        ]
    }
    /*
    ----------------------------------------------------------------------------------------
        consensus
    ----------------------------------------------------------------------------------------
    */

    withName: BCFTOOLS_CONSENSUS{
        ext.prefix = { "${meta.id}-${params.mapping_tool}_${params.variant_caller}" }
        //ext.args = "--iupac-codes --mark-del '-' --mark-ins lc --mark-snv lc"
        //get rid of --iupac-codes cause the pipeline fail
        ext.args = "--iupac-codes --mark-ins lc --mark-snv lc"
        publishDir = [
            path: { "${params.outdir}/${meta.id}/consensus" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
            enable: true
        ]
    }
    withName: CONSENSUS_REFORMAT{
        //ext.args = "--maxambigs 0.20"
        //change to 50%, this is the cutoff NML using
        ext.args = "--maxambigs 0.50"
        ext.prefix = { "${meta.id}-${params.mapping_tool}_${params.variant_caller}" }

        publishDir = [
            path: { "${params.outdir}/${meta.id}/consensus" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
            enable: true
        ]
    }

    //get stats
    withName: SEQKIT_FX2TAB_RAW_CONSENSUS {
        ext.args = '--only-id --name --length -C ATCG -C RYSWKMBDHV -C N -H'
        ext.suffix = 'txt'
        //ext.prefix = { "${meta.id}.bcftools_consensus_stats" }
        ext.prefix = { "${meta.id}-${params.mapping_tool}_${params.variant_caller}.all_consensus_stats" }
        publishDir = [
            path: { "${params.outdir}/${meta.id}/consensus" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }
    //get stats
    withName: SEQKIT_FX2TAB {
        ext.args = '--only-id --name --length -C ATCG -C RYSWKMBDHV -C N -H'
        ext.suffix = 'txt'
        //ext.prefix = { "${meta.id}.bcftools_consensus_stats" }
        ext.prefix = { "${meta.id}-${params.mapping_tool}_${params.variant_caller}.consensus_stats" }
        publishDir = [
            path: { "${params.outdir}/${meta.id}/consensus" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    /*
    ----------------------------------------------------------------------------------------
        classifier: blast typing
    ----------------------------------------------------------------------------------------
    */
    withName: BLAST_BLASTN {
        //ext.args = "-max_target_seqs 1 -outfmt '6 std qlen slen qcovs' -perc_identity ${params.minblastident} -qcov_hsp_perc ${params.minblastcov} "
        ext.args = "-max_target_seqs 1 -outfmt '6 std qlen slen qcovs' -perc_identity ${params.minblastident} "
        //q cover filter
        ext.args2 = " ${params.minblastcov} "
        //ext.prefix = {"${meta.id}-${params.mapping_tool}_${params.variant_caller}.blastn"}
        ext.prefix = {"${meta.id}-${params.mapping_tool}_${params.variant_caller}.btyping_output"}
        publishDir = [
            path: { "${params.outdir}/${meta.id}/classify/typing" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
            enabled: false
        ]

    }
    withName: CSVTK_ADD_HEADER_BLASTN {
        ext.prefix = {"${meta.id}-${params.mapping_tool}_${params.variant_caller}.typing"}
        ext.args = "-t -H "
        publishDir = [
            path: { "${params.outdir}/${meta.id}/classify/typing" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]


    }
    withName: CONCAT_TYPING{
        ext.prefix = {"${params.mapping_tool}_${params.variant_caller}.typing"}
        publishDir = [
            path: { "${params.outdir}/report" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },

        ]
    }

    /*
    ----------------------------------------------------------------------------------------
        classifier: nextclade
    ----------------------------------------------------------------------------------------
    */
    withName: SEGMENT2DATASET {
        ext.prefix = {"${params.mapping_tool}-${params.variant_caller}"}
        publishDir = [
            path: { "${params.outdir}/${meta.id}/classify/nextclade" },
            mode: params.publish_dir_mode,
            pattern: "*.{seg2typedata.tsv}",
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
            enabled: true
        ]
    }
    withName: NEXTCLADE_RUN {
        //ext.prefix = {"${meta.id}.nextclade"}
        publishDir = [
            path: { "${params.outdir}/${meta.id}/classify/nextclade" },
            mode: params.publish_dir_mode,
            pattern: "*.{tsv,dbname.txt}",
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
            enabled: true
        ]

    }
    withName: CONCAT_NEXTCLADE{
        ext.prefix = {"${params.mapping_tool}_${params.variant_caller}.nextclade"}
        publishDir = [
            path: { "${params.outdir}/report" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },

        ]
    }

    /*
    ----------------------------------------------------------------------------------------
        report
    ----------------------------------------------------------------------------------------
    */
    withName: CONSENSUS_REPORT {

        ext.prefix = {"${meta.id}-${params.mapping_tool}_${params.variant_caller}.consensus_summary"}
        publishDir = [
            path: { "${params.outdir}/${meta.id}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }
    withName: CONCAT_CONSENSU_REPORT{
        ext.prefix = {"${params.mapping_tool}_${params.variant_caller}.consensus_summary"}
        publishDir = [
            path: { "${params.outdir}/report" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },

        ]
    }


    withName: CUSTOM_DUMPSOFTWAREVERSIONS {
        publishDir = [
            path: { "${params.outdir}/pipeline_info" },
            mode: params.publish_dir_mode,
            pattern: '*_versions.yml'
        ]
    }
}

if (params.platform == 'nanopore') {
    includeConfig 'modules_nanopore.config'
}else if (params.platform == 'illumina') {
    includeConfig 'modules_illumina.config'
}
